// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogCancelled extends ethereum.Event {
  get params(): LogCancelled__Params {
    return new LogCancelled__Params(this);
  }
}

export class LogCancelled__Params {
  _event: LogCancelled;

  constructor(event: LogCancelled) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogDeposit extends ethereum.Event {
  get params(): LogDeposit__Params {
    return new LogDeposit__Params(this);
  }
}

export class LogDeposit__Params {
  _event: LogDeposit;

  constructor(event: LogDeposit) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get order(): LogDepositOrderStruct {
    return changetype<LogDepositOrderStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }

  get amountIn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogDepositOrderStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get inputToken(): Address {
    return this[1].toAddress();
  }

  get outputToken(): Address {
    return this[2].toAddress();
  }

  get module(): Address {
    return this[3].toAddress();
  }

  get handler(): Address {
    return this[4].toAddress();
  }

  get amountIn(): BigInt {
    return this[5].toBigInt();
  }

  get minReturn(): BigInt {
    return this[6].toBigInt();
  }

  get salt(): BigInt {
    return this[7].toBigInt();
  }

  get data(): Bytes {
    return this[8].toBytes();
  }
}

export class LogFill extends ethereum.Event {
  get params(): LogFill__Params {
    return new LogFill__Params(this);
  }
}

export class LogFill__Params {
  _event: LogFill;

  constructor(event: LogFill) {
    this._event = event;
  }

  get key(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountOut(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get auxData(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class GelatoOrdersVault__canFillInput_orderStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get inputToken(): Address {
    return this[1].toAddress();
  }

  get outputToken(): Address {
    return this[2].toAddress();
  }

  get module(): Address {
    return this[3].toAddress();
  }

  get handler(): Address {
    return this[4].toAddress();
  }

  get amountIn(): BigInt {
    return this[5].toBigInt();
  }

  get minReturn(): BigInt {
    return this[6].toBigInt();
  }

  get salt(): BigInt {
    return this[7].toBigInt();
  }

  get data(): Bytes {
    return this[8].toBytes();
  }
}

export class GelatoOrdersVault__isActiveOrderInput_orderStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get inputToken(): Address {
    return this[1].toAddress();
  }

  get outputToken(): Address {
    return this[2].toAddress();
  }

  get module(): Address {
    return this[3].toAddress();
  }

  get handler(): Address {
    return this[4].toAddress();
  }

  get amountIn(): BigInt {
    return this[5].toBigInt();
  }

  get minReturn(): BigInt {
    return this[6].toBigInt();
  }

  get salt(): BigInt {
    return this[7].toBigInt();
  }

  get data(): Bytes {
    return this[8].toBytes();
  }
}

export class GelatoOrdersVault__keyOfInput_orderStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get inputToken(): Address {
    return this[1].toAddress();
  }

  get outputToken(): Address {
    return this[2].toAddress();
  }

  get module(): Address {
    return this[3].toAddress();
  }

  get handler(): Address {
    return this[4].toAddress();
  }

  get amountIn(): BigInt {
    return this[5].toBigInt();
  }

  get minReturn(): BigInt {
    return this[6].toBigInt();
  }

  get salt(): BigInt {
    return this[7].toBigInt();
  }

  get data(): Bytes {
    return this[8].toBytes();
  }
}

export class GelatoOrdersVault extends ethereum.SmartContract {
  static bind(address: Address): GelatoOrdersVault {
    return new GelatoOrdersVault("GelatoOrdersVault", address);
  }

  GELATO(): Address {
    let result = super.call("GELATO", "GELATO():(address)", []);

    return result[0].toAddress();
  }

  try_GELATO(): ethereum.CallResult<Address> {
    let result = super.tryCall("GELATO", "GELATO():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  WRAPPED_NATIVE(): Address {
    let result = super.call("WRAPPED_NATIVE", "WRAPPED_NATIVE():(address)", []);

    return result[0].toAddress();
  }

  try_WRAPPED_NATIVE(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "WRAPPED_NATIVE",
      "WRAPPED_NATIVE():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  canFill(
    _minReturn: BigInt,
    _order: GelatoOrdersVault__canFillInput_orderStruct,
    _auxData: Bytes
  ): boolean {
    let result = super.call(
      "canFill",
      "canFill(uint256,(address,address,address,address,address,uint256,uint256,uint256,bytes),bytes):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_minReturn),
        ethereum.Value.fromTuple(_order),
        ethereum.Value.fromBytes(_auxData)
      ]
    );

    return result[0].toBoolean();
  }

  try_canFill(
    _minReturn: BigInt,
    _order: GelatoOrdersVault__canFillInput_orderStruct,
    _auxData: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canFill",
      "canFill(uint256,(address,address,address,address,address,uint256,uint256,uint256,bytes),bytes):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_minReturn),
        ethereum.Value.fromTuple(_order),
        ethereum.Value.fromBytes(_auxData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  deposits(param0: Bytes): BigInt {
    let result = super.call("deposits", "deposits(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBigInt();
  }

  try_deposits(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("deposits", "deposits(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isActiveOrder(
    _order: GelatoOrdersVault__isActiveOrderInput_orderStruct
  ): boolean {
    let result = super.call(
      "isActiveOrder",
      "isActiveOrder((address,address,address,address,address,uint256,uint256,uint256,bytes)):(bool)",
      [ethereum.Value.fromTuple(_order)]
    );

    return result[0].toBoolean();
  }

  try_isActiveOrder(
    _order: GelatoOrdersVault__isActiveOrderInput_orderStruct
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isActiveOrder",
      "isActiveOrder((address,address,address,address,address,uint256,uint256,uint256,bytes)):(bool)",
      [ethereum.Value.fromTuple(_order)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  keyOf(_order: GelatoOrdersVault__keyOfInput_orderStruct): Bytes {
    let result = super.call(
      "keyOf",
      "keyOf((address,address,address,address,address,uint256,uint256,uint256,bytes)):(bytes32)",
      [ethereum.Value.fromTuple(_order)]
    );

    return result[0].toBytes();
  }

  try_keyOf(
    _order: GelatoOrdersVault__keyOfInput_orderStruct
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "keyOf",
      "keyOf((address,address,address,address,address,uint256,uint256,uint256,bytes)):(bytes32)",
      [ethereum.Value.fromTuple(_order)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _gelato(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _wrappedNative(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CancelOrderCall extends ethereum.Call {
  get inputs(): CancelOrderCall__Inputs {
    return new CancelOrderCall__Inputs(this);
  }

  get outputs(): CancelOrderCall__Outputs {
    return new CancelOrderCall__Outputs(this);
  }
}

export class CancelOrderCall__Inputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }

  get _order(): CancelOrderCall_orderStruct {
    return changetype<CancelOrderCall_orderStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CancelOrderCall__Outputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }
}

export class CancelOrderCall_orderStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get inputToken(): Address {
    return this[1].toAddress();
  }

  get outputToken(): Address {
    return this[2].toAddress();
  }

  get module(): Address {
    return this[3].toAddress();
  }

  get handler(): Address {
    return this[4].toAddress();
  }

  get amountIn(): BigInt {
    return this[5].toBigInt();
  }

  get minReturn(): BigInt {
    return this[6].toBigInt();
  }

  get salt(): BigInt {
    return this[7].toBigInt();
  }

  get data(): Bytes {
    return this[8].toBytes();
  }
}

export class DepositNativeCall extends ethereum.Call {
  get inputs(): DepositNativeCall__Inputs {
    return new DepositNativeCall__Inputs(this);
  }

  get outputs(): DepositNativeCall__Outputs {
    return new DepositNativeCall__Outputs(this);
  }
}

export class DepositNativeCall__Inputs {
  _call: DepositNativeCall;

  constructor(call: DepositNativeCall) {
    this._call = call;
  }

  get _order(): DepositNativeCall_orderStruct {
    return changetype<DepositNativeCall_orderStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class DepositNativeCall__Outputs {
  _call: DepositNativeCall;

  constructor(call: DepositNativeCall) {
    this._call = call;
  }
}

export class DepositNativeCall_orderStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get inputToken(): Address {
    return this[1].toAddress();
  }

  get outputToken(): Address {
    return this[2].toAddress();
  }

  get module(): Address {
    return this[3].toAddress();
  }

  get handler(): Address {
    return this[4].toAddress();
  }

  get amountIn(): BigInt {
    return this[5].toBigInt();
  }

  get minReturn(): BigInt {
    return this[6].toBigInt();
  }

  get salt(): BigInt {
    return this[7].toBigInt();
  }

  get data(): Bytes {
    return this[8].toBytes();
  }
}

export class DepositTokenCall extends ethereum.Call {
  get inputs(): DepositTokenCall__Inputs {
    return new DepositTokenCall__Inputs(this);
  }

  get outputs(): DepositTokenCall__Outputs {
    return new DepositTokenCall__Outputs(this);
  }
}

export class DepositTokenCall__Inputs {
  _call: DepositTokenCall;

  constructor(call: DepositTokenCall) {
    this._call = call;
  }

  get _order(): DepositTokenCall_orderStruct {
    return changetype<DepositTokenCall_orderStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class DepositTokenCall__Outputs {
  _call: DepositTokenCall;

  constructor(call: DepositTokenCall) {
    this._call = call;
  }
}

export class DepositTokenCall_orderStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get inputToken(): Address {
    return this[1].toAddress();
  }

  get outputToken(): Address {
    return this[2].toAddress();
  }

  get module(): Address {
    return this[3].toAddress();
  }

  get handler(): Address {
    return this[4].toAddress();
  }

  get amountIn(): BigInt {
    return this[5].toBigInt();
  }

  get minReturn(): BigInt {
    return this[6].toBigInt();
  }

  get salt(): BigInt {
    return this[7].toBigInt();
  }

  get data(): Bytes {
    return this[8].toBytes();
  }
}

export class FillCall extends ethereum.Call {
  get inputs(): FillCall__Inputs {
    return new FillCall__Inputs(this);
  }

  get outputs(): FillCall__Outputs {
    return new FillCall__Outputs(this);
  }
}

export class FillCall__Inputs {
  _call: FillCall;

  constructor(call: FillCall) {
    this._call = call;
  }

  get _order(): FillCall_orderStruct {
    return changetype<FillCall_orderStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get _auxData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class FillCall__Outputs {
  _call: FillCall;

  constructor(call: FillCall) {
    this._call = call;
  }
}

export class FillCall_orderStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get inputToken(): Address {
    return this[1].toAddress();
  }

  get outputToken(): Address {
    return this[2].toAddress();
  }

  get module(): Address {
    return this[3].toAddress();
  }

  get handler(): Address {
    return this[4].toAddress();
  }

  get amountIn(): BigInt {
    return this[5].toBigInt();
  }

  get minReturn(): BigInt {
    return this[6].toBigInt();
  }

  get salt(): BigInt {
    return this[7].toBigInt();
  }

  get data(): Bytes {
    return this[8].toBytes();
  }
}
